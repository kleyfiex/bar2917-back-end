// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email String @unique
  password String

  phone String @default("")
  name String @default("")
  birthdate String @default("")

  orders Order[]
  feedbacks Feedback[]
}

model Product {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique
  description String
  price Int
  image String
  weight Float

  orderItems OrderItem[]

  category  Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int?  @map("category_id")
}

model Category {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  name String @unique
  slug String @unique

  products Product[]
}

// model Address {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   township    String
//   street      String
//   house       String
//   flat        Int

//   order     Order    @relation(fields: [orderId], references: [id])
//   orderId   Int      @map("order_id") @unique
// }

model Order {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // amount Int

  status EnumOrderStatus @default(PENDING)
  items OrderItem[]
  address String

  // deliveryAddress Address?

  user      User @relation(fields: [userId], references: [id])
  userId    Int  @map("user_id")

}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity  Int
  price     Int

  order      Order? @relation(fields: [orderId], references: [id])
  orderId    Int?   @map("order_id")

  product      Product @relation(fields: [productId], references: [id])
  productId    Int     @map("product_id")

  @@map("Order_item")
}

model Feedback {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    text String

    user      User @relation(fields: [userId], references: [id])
    userId    Int  @map("user_id")
}


enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}